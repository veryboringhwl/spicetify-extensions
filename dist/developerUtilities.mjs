await new Promise((resolve) => Spicetify.Events.webpackLoaded.on(resolve));
function u(e){if(!e)return{};let i={},o=(t,a)=>{if(!(!t||typeof t!="object"))for(let n in t)Object.hasOwn(t,n)&&a[n]===void 0&&(a[n]=t[n])};return o(e,i),o(e.item,i),o(e.reference,i),i}var k=Spicetify.ReactDOM;var y=(e,{timeout:i=5e3}={})=>{let o=performance.now();return new Promise(t=>{function a(){let n=document.querySelector(e);if(n){t(n);return}if(performance.now()-o>i){console.warn(`Timeout: Could not find element: ${e}`),t(null);return}requestAnimationFrame(a)}a()})};var x=Spicetify.ReactJSX,r=x.jsx,l=x.jsxs,w=x.Fragment;var{createRoot:G}=k,A=({path:e,element:i})=>{let o=`/${e}`,t=null,a=()=>r(Spicetify.ReactComponent.Router,{location:Spicetify.Platform.History.location,navigator:Spicetify.Platform.History,children:r(Spicetify.ReactComponent.Routes,{children:r(Spicetify.ReactComponent.Route,{element:i,path:o})})}),n=async()=>{if(t)return;let p=await y("main");if(!p)return;t=G(p),t.render(r(a,{}));let m=await y(".main-topBar-container");m&&(m.style.display="none");let f=await y(".main-view-container__scroll-node-child");f&&(f.style.height="100%",f.style.paddingBottom="unset");let g=await y(".T0fKO6B7LQSCE_VaSM1P");g&&(g.style.overflow="hidden",g.style.height="100%")},s=async()=>{let p=await y(".main-topBar-container");p&&(p.style.display="");let m=await y(".main-view-container__scroll-node-child");m&&(m.style.height="",m.style.paddingBottom="");let f=await y(".T0fKO6B7LQSCE_VaSM1P");f&&(f.style.overflow="",f.style.height=""),t&&(t.unmount(),t=null)},d=p=>{(p.pathname||p.location?.pathname)===o?n():s()};d(Spicetify.Platform.History),Spicetify.Platform.History.listen(d)};var b={editButton:{path:"M17.318 1.975a3.329 3.329 0 114.707 4.707L8.451 20.256c-.49.49-1.082.867-1.735 1.103L2.34 22.94a1 1 0 01-1.28-1.28l1.581-4.376a4.726 4.726 0 011.103-1.735L17.318 1.975zm3.293 1.414a1.329 1.329 0 00-1.88 0L5.159 16.963c-.283.283-.5.624-.636 1l-.857 2.372 2.371-.857a2.726 2.726 0 001.001-.636L20.611 5.268a1.329 1.329 0 000-1.879z",size:24},settings:{path:"M7.96 5.33a2.67 2.67 90 100 5.34 2.67 2.67 90 000-5.34ZM6.67 8A1.33 1.33 90 119.33 8 1.33 1.33 90 016.67 8Zm4.82-4.81a.95.94 90 01-1.1-.75L10.05.55A.47.47 90 009.68.17 8.1 8.1 90 006.32.17.47.47 90 005.96.55L5.61 2.44a.95.95 90 01-1.25.71L2.55 2.51a.47.47 90 00-.51.13C1.28 3.47.71 4.46.36 5.53a.47.47 90 00.14.51L1.97 7.28a.94.94 90 010 1.43L.5 9.95a.47.47 90 00-.14.51 7.98 7.98 90 001.68 2.9.47.47 90 00.51.13l1.81-.65a.94.94 90 011.25.72l.34 1.89c.04.18.18.33.37.37a8.1 8.1 90 003.36 0 .47.47 90 00.37-.37l.34-1.89a.95.95 90 011.25-.72l1.81.65c.18.06.38.01.51-.13.76-.84 1.34-1.82 1.68-2.9a.47.47 90 00-.14-.5L14.03 8.72a.94.94 90 010-1.44L15.5 6.04a.47.47 90 00.14-.5 7.98 7.98 90 00-1.68-2.9.47.47 90 00-.51-.13l-1.81.65a.95.95 90 01-.15.04Zm-8.82.78 1.25.44a2.28 2.28 90 003-1.73l.24-1.3a6.81 6.81 90 011.68 0l.24 1.3a2.28 2.28 90 003.01 1.73l1.24-.44c.34.44.63.93.84 1.44l-1 .85a2.27 2.27 90 000 3.48l1 .85a6.65 6.65 90 01-.84 1.44l-1.24-.44A2.28 2.28 90 009.08 13.32l-.24 1.29a6.8 6.8 90 01-1.69 0l-.23-1.29A2.28 2.28 90 003.91 11.59l-1.24.44a6.65 6.65 90 01-.84-1.44l1-.86a2.27 2.27 90 000-3.47l-1-.85c.21-.51.5-1 .84-1.44Z",size:16},github:{path:"M12.2135 0C18.947 0 24.4267 5.5 24.4066 12.3041c0 5.4391-3.4983 10.0428-8.3513 11.6728-.6065.1223-.829-.265-.829-.591 0-.4072.02-1.7315.02-3.3815 0-1.1613-.384-1.8945-.829-2.2815 2.73-.3058 5.581-1.3445 5.581-6.0708 0-1.3445-.465-2.4445-1.2537-3.3.1213-.3055.5463-1.5688-.1212-3.2595 0 0-1.0312-.326-3.3567 1.263-.9707-.2648-2.0219-.4075-3.0532-.4075A11.7425 11.7425 90 009.16 6.3556c-2.3252-1.589-3.3565-1.263-3.3565-1.263-.6675 1.6907-.2427 2.954-.1215 3.2595-.7685.8555-1.2535 1.9555-1.2535 3.3 0 4.7263 2.8509 5.7855 5.5607 6.0708-.3437.3055-.6675.8555-.7685 1.65-.7077.326-2.467.8555-3.5587-1.0185 0 0-.6472-1.1815-1.8807-1.263 0 0-1.193 0-.081.7538 0 0 .809.3665 1.355 1.7925 0 0 .7075 2.2002 4.105 1.4667 0 1.0188.02 1.9965.02 2.2818 0 .3258-.2222.713-.829.5905C3.4983 22.3472 0 17.7432 0 12.3042 0 5.5 5.4597 0 12.2135 0Z",size:24},close:{path:"M31.098 29.794 16.955 15.65 31.097 1.51 29.683.093 15.54 14.237 1.4.094-.016 1.508 14.126 15.65-.016 29.795l1.414 1.414L15.54 17.065l14.144 14.143",size:32},warning:{path:"M13 14V9H11v5Zm0 2H11v2h2Zm8.884 3.5A1 1 0 0121 21H3a1 1 0 01-.884-1.468l9-17c.346-.654 1.422-.654 1.768 0Z",size:24},more:{path:"M3 8A1.5 1.5 0 110 8a1.5 1.5 0 013 0zm6.5 0a1.5 1.5 0 11-3 0 1.5 1.5 0 013 0zM16 8a1.5 1.5 0 11-3 0 1.5 1.5 0 013 0z",size:16},questionMark:{path:"M12 2c5.523 0 10 4.478 10 10s-4.477 10-10 10S2 17.522 2 12 6.477 2 12 2Zm0 1.667c-4.595 0-8.333 3.738-8.333 8.333S7.405 20.333 12 20.333 20.333 16.595 20.333 12c0-4.595-3.738-8.333-8.333-8.333ZM12 15.5a1 1 0 110 2 1 1 0 010-2Zm0-8.75a2.75 2.75 0 012.75 2.75c0 1.01-.297 1.574-1.051 2.359l-.169.171c-.622.622-.78.886-.78 1.47a.75.75 0 01-1.5 0c0-1.01.297-1.574 1.051-2.359l-.169-.171c.622-.622.78-.886.78-1.47a1.25 1.25 0 00-2.493-.128l-.007.128a.75.75 0 01-1.5 0A2.75 2.75 0 0112 6.75Z",size:24},dropdown:{path:"M20.4614 6.3469a1.506 1.506 90 00-2.1125.1919L12 14.1564 5.651 6.5389a1.4997 1.4997 90 10-2.3028 1.922l7.5004 9.0004a1.4992 1.4992 90 002.3028 0l7.5004-9.0005a1.5019 1.5019 90 00-.1904-2.1139Z",size:24},palette:{path:"M12 2c5.461 0 9.965 4.012 9.992 8.84 0 3.051-2.504 5.554-5.555 5.554H14.441a1.64 1.64 0 00-1.668 1.668c0 .473.148.836.438 1.125.257.29.437.688.437 1.125C13.648 21.254 12.926 22 12 22 6.5 22 2 17.5 2 12S6.5 2 12 2Z",size:24},duplicate:{path:"M15 3.5c0-.5-.5-1-1-1H11V1c0-.5-.5-1-1-1H2C1.5 0 1 .5 1 1V11.5c0 .5.5 1 1 1H4.5V15c0 .5.5 1 1 1H14c.5 0 1-.5 1-1ZM2.5 2c0-.25.25-.5.5-.5H9c.25 0 .5.25.5.5v8.5c0 .25-.25.5-.5.5H3c-.25 0-.5-.25-.5-.5Zm4 12.5c-.25 0-.5-.25-.5-.5V12.5h4c.5 0 1-.5 1-1V4h2c.25 0 .5.25.5.5V14c0 .25-.25.5-.5.5Z",size:16},terminal:{path:"M3.924 5.02a.75.75 0 011.056-.096l3 2.5a.75.75 0 010 1.152l-3 2.5a.75.75 0 11-.96-1.152L6.328 8 4.02 6.076A.75.75 0 013.924 5.02zM8.25 10.5a.75.75 0 000 1.5h3a.75.75 0 000-1.5h-3zM0 3.25A2.25 2.25 0 012.25 1h11.5A2.25 2.25 0 0116 3.25v9.5A2.25 2.25 0 0113.75 15H2.25A2.25 2.25 0 010 12.75v-9.5zm2.25-.75a.75.75 0 00-.75.75v9.5c0 .414.336.75.75.75h11.5a.75.75 0 00.75-.75v-9.5a.75.75 0 00-.75-.75H2.25z",size:16},customArtwork:{path:"M0 2v12a2 2 90 002 2h12a2 2 90 002-2V7.33l-1.33 1.33v5.33a.66.66 90 01-.66.66H2a.66.66 90 01-.66-.66V2A.66.66 90 012 1.34h9.66L13 0H2A2 2 90 000 2zm2.66 3.33C4.32 5 4.99 3.67 5.32 2.67h.33c.33 1 1 2.33 2.66 2.6v.33c-1.66.33-2.33 1.66-2.66 2.66h-.33c-.33-1-1-2.33-2.66-2.66zm13-2.66a1.33 1.33 90 00-1.66 0L7 9.33a0 0 90 000 0l-1.66 3a.33.33 90 00.33.33l3-1.66a0 0 90 000 0l7-7a1.33 1.33 90 000-1.33z",size:16},play:{path:"M3.3333 3.516c0-1.138 1.2173-1.8613 2.2167-1.318l8.2413 4.484c1.044.5687 1.044 2.0673 0 2.6353L5.55 13.8013C4.5507 14.3453 3.3333 13.6213 3.3333 12.484V3.516Z",size:16},pause:{path:"M3.8307 2A1.1667 1.1667 90 002.664 3.1667V12.8333C2.664 13.4773 3.1867 14 3.8307 14H6.164A1.1667 1.1667 90 007.3307 12.8333V3.1667A1.1667 1.1667 90 006.164 2H3.8307ZM9.8307 2A1.1667 1.1667 90 008.664 3.1667V12.8333C8.664 13.4773 9.1867 14 9.8307 14H12.164A1.1667 1.1667 90 0013.3307 12.8333V3.1667A1.1667 1.1667 90 0012.164 2H9.8307Z",size:16},reload:{path:"M7.98 0a7.97 7.97 0 0 0-3.365.752 8.008 8.008 0 0 0-4.227 9.715 8.006 8.006 0 0 0 9.12 5.389 8.005 8.005 0 0 0 6.474-8.385.5.5 0 0 0-.531-.467.5.5 0 0 0-.467.533 6.994 6.994 0 0 1-5.664 7.338 6.994 6.994 0 0 1-7.98-4.717 6.993 6.993 0 0 1 3.696-8.5A6.996 6.996 0 0 1 13.745 4h-3.246a.5.5 0 0 0-.5.5.5.5 0 0 0 .5.5h4a.5.5 0 0 0 .5-.5v-4a.5.5 0 0 0-.5-.5.5.5 0 0 0-.5.5v2.215A8.014 8.014 0 0 0 7.979 0z",size:16}},Z=e=>{let{path:i,size:o}=b[e],t=({size:a=o,fill:n="currentColor"})=>r("svg",{fill:n,height:a,role:"img",viewBox:`0 0 ${o} ${o}`,width:a,children:r("path",{d:i})});return t.displayName=`Icon(${e})`,t.defaultProps={size:o,fill:"currentColor"},t},{raw:K,react:Y,html:$}=Object.keys(b).reduce((e,i)=>(e.raw[i]=b[i].path,e.react[i]=Z(i),e.html[i]=`<path d="${b[i].path}"/>`,e),{raw:{},react:{},html:{}}),c={React:Y,HTML:$,RAW:K};var v=({message:e="",keyPrefix:i="custom-notif",autoHideDuration:o=3e3,backgroundColour:t="#fff",colour:a="#000",isWarning:n=!1})=>{let s=n?l(w,{children:[r(c.React.warning,{size:24}),r("span",{children:e})]}):r("span",{children:e}),d=n?"#ff9800":t,p=n?"#fff":a;try{Spicetify.Snackbar.enqueueCustomSnackbar(i,{keyPrefix:i,autoHideDuration:o,children:r("div",{className:"custom-notification",style:{display:"flex",gap:"8px",alignItems:"center",color:p,backgroundColor:d,padding:"14px 16px",borderRadius:"4px",fontSize:"0.875rem"},children:s})})}catch(m){console.error("Error displaying notification:",m)}};var h=Spicetify.React;var _={id:"clipboard",title:"ClipboardAPI",description:"Copy data to system clipboard for easy export.",icon:"\u{1F4CB}",color:"#FFEAA7",coreMethods:[{name:"copy(data)",description:"Copies data to clipboard.",parameters:["data: any - Data to copy (object, array, string, etc.)"],returns:"Promise<void>",example:'await Spicetify.Platform.ClipboardAPI.copy("The quick brown fox");'},{name:"paste()",description:"Pastes data from clipboard.",returns:"Promise<string>",example:"await Spicetify.Platform.ClipboardAPI.paste();"}]};var C={id:"graphql",title:"GraphQLLoader",description:"Execute GraphQL queries for detailed Spotify data.",icon:"\u{1F50D}",color:"#DDA0DD",coreMethods:[{name:"(query, variables, context)",description:"Executes a GraphQL query.",parameters:["query: object - GraphQL query definitions","variables: object - Query variables"],returns:"Promise<any>",example:"const result = await Spicetify.Platform.GraphQLLoader(Spicetify.GraphQL.Definition.Definition, { uri: 'spotify:track:123' });"}]};var R={id:"library",title:"LibraryAPI",description:"Provides a view of the user's library items (playlists, folders, artists, etc.). It handles sorting, filtering, and state management (adding, removing, and pinning items).",icon:"\u{1F4DA}",color:"#4A90E2",coreMethods:[{name:"getContents({options})",description:"The primary method for browsing the library. Fetches a list of all library items (playlists, folders, artists, albums, etc.) based on the specified sorting, filtering, and folder context.",parameters:["options: object - An object containing a mix of the following optional properties to customize the query:","  - folderUri: string - The URI of a specific folder to view its contents. If omitted, the root of the library is shown.","  - textFilter: string - A search string to filter items by name.","  - filters: string[] - An array of filter IDs to apply. Use `getContentsPrimaryFilterId()` to get valid IDs. (e.g., ['2'] for Playlists, ['1'] for Artists).","  - sortOrder: string - The ID of the sort order to apply. Common values can be retrieved from `getRecentsSortOrderId()` or `getCustomSortOrderId()`.","  - sortDirection: 'asc' | 'reverse' - The direction for sorting. Defaults to ascending.","  - flattenTree: boolean - If true, returns all playlists from all folders in a single flat list. Defaults to false.","  - expandedFolders: string[] - An array of folder URIs that should be considered 'expanded' in the view, affecting which items are returned.","  - offset: number - The starting index for pagination. Defaults to 0.","  - limit: number - The number of items to return per page. Defaults to a client-defined value.","  - itemToCheckCurationFor: string[] - An array of item URIs to check for curation status within the current view."],returns:"Promise<object> - A promise that resolves to an object containing the library items and metadata, with a structure like: `{ items: LibraryItem[], totalLength: number, unfilteredTotalLength: number, availableFilters: Filter[], availableSorts: Sort[] }`.",example:`// Get the first 50 items in the library, sorted by 'Recents'
const libraryView = await Spicetify.Platform.LibraryAPI.getContents({ sortOrder: Spicetify.Platform.LibraryAPI.getRecentsSortOrderId(), limit: 50 });`},{name:"getTracks(options)",description:"Fetches a paginated list of tracks from the user's 'Liked Songs' collection. It can also be filtered to show liked songs by a specific artist or from a specific album.",parameters:["options: object - An object with the following optional properties:","  - uri: string - An optional Artist or Album URI to scope the results. If provided, only liked tracks from that artist/album will be returned.","  - sort: object - A sort order object.","  - filters: object[] - An array of filter objects.","  - offset: number - The starting index for pagination. Defaults to 0.","  - limit: number - The number of items to return per page."],returns:"Promise<object> - A promise that resolves to an object with the structure: `{ items: Track[], offset: number, limit: number, totalLength: number, unfilteredTotalLength: number }`.",example:`// Get the first 20 liked songs
const likedTracks = await Spicetify.Platform.LibraryAPI.getTracks({ limit: 20 });`},{name:"add({ uris, silent })",description:"Adds one or more items (e.g., tracks, episodes) to the user's library. For tracks, this is equivalent to 'Liking' a song.",parameters:["options: object - An object with the following properties:","  - uris: string[] - An array of Spotify URIs to add.","  - silent: boolean - (Optional) If true, may suppress UI notifications about the action."],returns:"Promise<void> - A promise that resolves when the operation is complete, or rejects on failure.",example:"await Spicetify.Platform.LibraryAPI.add({ uris: ['spotify:track:4cOdK2wGLETOMs3AKxb4ja'], silent: true });"},{name:"remove({ uris, silent })",description:"Removes one or more items from the user's library. For tracks, this is equivalent to 'Unliking' a song.",parameters:["options: object - An object with the following properties:","  - uris: string[] - An array of Spotify URIs to remove.","  - silent: boolean - (Optional) If true, may suppress UI notifications about the action."],returns:"Promise<void> - A promise that resolves when the operation is complete, or rejects on failure.",example:"await Spicetify.Platform.LibraryAPI.remove({ uris: ['spotify:track:4cOdK2wGLETOMs3AKxb4ja'] });"},{name:"pin(uri, options)",description:"Pins an item (like a playlist or album) to the top of the user's library.",parameters:["uri: string - The Spotify URI of the item to pin.","options: object - (Optional) An object to specify the pin position:","  - before: string - Pin the item before the item with this URI.","  - after: string - Pin the item after the item with this URI."],returns:"Promise<void> - A promise that resolves on success. It may reject if, for example, the user has reached the maximum number of pinned items.",example:"await Spicetify.Platform.LibraryAPI.pin('spotify:playlist:37i9dQZF1DXcBWIGoYBM5M');"},{name:"unpin(uri)",description:"Unpins an item from the user's library.",parameters:["uri: string - The Spotify URI of the item to unpin."],returns:"Promise<void> - A promise that resolves when the item is unpinned.",example:"await Spicetify.Platform.LibraryAPI.unpin('spotify:playlist:37i9dQZF1DXcBWIGoYBM5M');"},{name:"contains(...uris)",description:"Asynchronously checks if one or more items are present in the user's library (e.g., if a track is 'Liked').",parameters:["...uris: string[] - A variable number of Spotify URI strings to check."],returns:"Promise<boolean[]> - A promise that resolves to an array of booleans, where each value corresponds to the URI at the same index in the input.",example:"const [isLiked] = await Spicetify.Platform.LibraryAPI.contains('spotify:track:4cOdK2wGLETOMs3AKxb4ja');"},{name:"containsSync(uri)",description:"Synchronously checks a local cache to see if an item is in the library. This is faster but may not be up-to-date with the server.",parameters:["uri: string - The single Spotify URI to check in the cache."],returns:"boolean | undefined - Returns `true` or `false` if the item's state is in the cache, otherwise `undefined`.",example:"const isLikedCached = Spicetify.Platform.LibraryAPI.containsSync('spotify:track:4cOdK2wGLETOMs3AKxb4ja');"},{name:"markAsPlayed(uri)",description:"Marks a podcast episode as played.",parameters:["uri: string - The Spotify URI of the episode to mark as played."],returns:"Promise<void>",example:"await Spicetify.Platform.LibraryAPI.markAsPlayed('spotify:episode:512ojhOvcUhvsfFdY4MvL8');"},{name:"markAsUnplayed(uri)",description:"Marks a podcast episode as unplayed.",parameters:["uri: string - The Spotify URI of the episode to mark as unplayed."],returns:"Promise<void>",example:"await Spicetify.Platform.LibraryAPI.markAsUnplayed('spotify:episode:512ojhOvcUhvsfFdY4MvL8');"},{name:"getEvents()",description:"Returns an event emitter instance that allows you to subscribe to library changes, such as items being added, removed, or pinned.",returns:"EventEmitter - An object with `on`, `off`, and other event emitter methods."}],utilityMethods:[{name:"getCapabilities()",description:"Returns an object detailing the capabilities of the library, such as whether it supports sorting, filtering, pinning, etc. (always seems to be true?)",returns:"object - An object with boolean flags like `canSort`, `canFilter`, `canPin`.",example:"const caps = Spicetify.Platform.LibraryAPI.getCapabilities(); if (caps.canPin) { /* ... */ }"},{name:"getTracksFilterTags()",description:"Retrieves the available genre and mood filter tags for the 'Liked Songs' collection.",returns:"Promise<Array<{ name: string, filter: string }>> - A promise that resolves to an array of filter objects.",example:"const moodFilters = await Spicetify.Platform.LibraryAPI.getTracksFilterTags();"},{name:"getContentsPrimaryFilterId(filterName)",description:"A utility to convert a human-readable filter name into the internal ID required by the `filters` parameter in `getContents()`.",parameters:["filterName: string - The name of the filter (e.g., 'album', 'artist', 'playlist', 'show')."],returns:"string | null - The corresponding ID, or null if not found.",example:"const playlistFilterId = Spicetify.Platform.LibraryAPI.getContentsPrimaryFilterId('playlist');"},{name:"getFilterLabel(filterId)",description:"A utility to convert an internal filter ID back to a human-readable, lowercase label (e.g., '2' -> 'playlist').",parameters:["filterId: string - The internal ID of the filter."],returns:"string - The lowercase label.",example:"const label = Spicetify.Platform.LibraryAPI.getFilterLabel('2'); // 'playlist'"},{name:"getSortOrderLabel(sortOrderId)",description:"A utility to convert an internal sort order ID back to a human-readable, lowercase label (e.g., '6' -> 'recently_played_or_added').",parameters:["sortOrderId: string - The internal ID of the sort order."],returns:"string - The lowercase label.",example:"const label = Spicetify.Platform.LibraryAPI.getSortOrderLabel('6');"},{name:"getRecentsSortOrderId()",description:"Returns the constant ID for the 'Recents' sort order, for use with `getContents()`.",returns:"string"},{name:"getCustomSortOrderId()",description:"Returns the constant ID for the 'Custom Order' sort order, which is the user's manual arrangement.",returns:"string"}],examples:[`// Example 1: Get the first 20 playlists, sorted alphabetically
const getSortedPlaylists = async () => {
  const playlistFilterId = Spicetify.Platform.LibraryAPI.getContentsPrimaryFilterId('playlist');
  // Note: Alphabetical sort order ID is typically '0', but this can vary.
  const result = await Spicetify.Platform.LibraryAPI.getContents({
    sortOrder: '0',
    filters: [playlistFilterId],
    limit: 20,
    offset: 0
  });
  console.log('Alphabetically Sorted Playlists:', result.items.map(item => item.name));
};

getSortedPlaylists();`,`// Example 2: Check if a track is liked, and if not, add it.
const likeTrackIfNotLiked = async (trackUri) => {
  const [isLiked] = await Spicetify.Platform.LibraryAPI.contains(trackUri);
  if (!isLiked) {
    console.log('Track not liked. Adding to library...');
    await Spicetify.Platform.LibraryAPI.add({ uris: [trackUri] });
    console.log('Track added!');
  } else {
    console.log('Track is already in library.');
  }
};

likeTrackIfNotLiked('spotify:track:4uUG5RXrOk84mYEfFvj3cK');`]};var T={id:"localStorage",title:"LocalStorageAPI",description:"Persistent storage for extension data and settings. All keys are prefixed with the username and a colon (e.g., 'username:key').",icon:"\u{1F4BE}",color:"#96CEB4",coreMethods:[{name:"setItem(key, value)",description:"Sets a storage item. The key will be prefixed with the username and a colon.",parameters:["key: string - Storage key (will be prefixed with username:)","value: string - Value to store"],returns:"void",example:"Spicetify.Platform.LocalStorageAPI.setItem('theme', 'dark');"},{name:"getItem(key)",description:"Gets a storage item. The provided key should not include the username prefix.",parameters:["key: string - Storage key (without username prefix)"],returns:"string | null",example:"const theme = Spicetify.Platform.LocalStorageAPI.getItem('theme');"},{name:"removeItem(key)",description:"Removes a storage item. The provided key should not include the username prefix.",parameters:["key: string - Storage key (without username prefix)"],returns:"void",example:"Spicetify.Platform.LocalStorageAPI.removeItem('theme');"},{name:"clear()",description:"Clears all storage items.",returns:"void",example:"Spicetify.Platform.LocalStorageAPI.clear();"},{name:"_events",description:"Returns an event emitter for localStorage events. You can add/remove listeners for `update`.",returns:"EventEmitter",example:`Spicetify.Platform.LocalStorageAPI._events._emitter.addListener("update", (event) => {
  console.log("LocalStorage updated:", event);
},{});`}],examples:[`// Save user preference
Spicetify.Platform.LocalStorageAPI.setItem('autoPlay', 'true');`,`// Get user preference
const autoPlay = Spicetify.Platform.LocalStorageAPI.getItem('autoPlay') === 'true';
console.log('Auto-play enabled:', autoPlay);`]};var L={id:"playback",title:"PlaybackAPI",description:"Control volume, mute, and playback settings.",icon:"\u{1F50A}",color:"#45B7D1",coreMethods:[{name:"setVolume(volume)",description:"Sets playback volume.",parameters:["volume: number - Volume level (0-1)"],returns:"Promise<void>",example:"await Spicetify.Platform.PlaybackAPI.setVolume(0.5); // 50% volume"},{name:"getVolume()",description:"Gets the current playback volume.",returns:"Promise<number>",example:"const volume = await Spicetify.Platform.PlaybackAPI.getVolume();"},{name:"setMute(muted)",description:"Mutes or unmutes playback.",parameters:["muted: boolean - True to mute, false to unmute"],returns:"Promise<void>",example:"await Spicetify.Platform.PlaybackAPI.setMute(true); // Mute playback"},{name:"isMuted()",description:"Checks if playback is currently muted.",returns:"Promise<boolean>",example:"const isMuted = await Spicetify.Platform.PlaybackAPI.isMuted();"},{name:"getEvents()",description:"Returns an event emitter for playback events. You can add listeners for `muted_changed` and `volume`.",returns:"EventEmitter",example:`Spicetify.Platform.PlaybackAPI.getEvents().addListener("volume", (event) => {
  console.log("Volume changed:", event);
});`}],examples:[`// Set volume to 75%
await Spicetify.Platform.PlaybackAPI.setVolume(0.75);`,`// Toggle mute
const isMuted = await Spicetify.Platform.PlaybackAPI.isMuted();
await Spicetify.Platform.PlaybackAPI.setMute(!isMuted);`]};var M={id:"player",title:"PlayerAPI",description:"Control playback, get player state, and manage the queue, context, and playback options.",icon:"\u25B6\uFE0F",color:"#1DB954",coreMethods:[{name:"getState()",description:"Returns the current, complete state of the player.",parameters:["None"],returns:`{
item: Track;
is_paused: boolean;
is_playing: boolean;
playback_speed: number;
position_as_of_timestamp: number;
duration: number;
context: PlayContext;
shuffle: boolean;
repeat: RepeatState;
}`,example:`const state = Spicetify.Platform.PlayerAPI.getState();
console.log('Currently playing track:', state.item.name);`},{name:"getEvents()",description:"Returns an event emitter for player state changes.",parameters:["None"],returns:"EventEmitter",example:`Spicetify.Platform.PlayerAPI.getEvents().addListener("update", (event) => {
  const { item, is_paused } = event.data;
  console.log(\`State changed: \${item.name} is \${is_paused ? 'paused' : 'playing'}\`)
});`},{name:"play(context, playOrigin, options)",description:"Plays a context, such as a playlist, album, or track. This is the primary method for starting playback.",parameters:["context: PlayContext       // The item to play (e.g., { uri: 'spotify:album:...' }).","playOrigin: PlayOrigin   // Describes where the play action originated from.","options?: PlayOptions     // Additional options like which track to start on, shuffle state, etc."],returns:"Promise<void>",example:`// Play an album starting from the 3rd track
await Spicetify.Platform.PlayerAPI.play(
  { uri: "spotify:album:1Je1IMUlBXcx1Fz0WE7oPT" },
  { featureIdentifier: "spicetify_example" },
  { skipTo: { trackIndex: 2 } }
);`},{name:"pause()",description:"Pauses the currently active playback.",parameters:["None"],returns:"Promise<void>",example:"await Spicetify.Platform.PlayerAPI.pause();"},{name:"resume()",description:"Resumes playback without changing the context. Functionally similar to play() with no arguments.",parameters:["None"],returns:"Promise<void>",example:"await Spicetify.Platform.PlayerAPI.resume();"},{name:"skipToNext(options?)",description:"Skips to the next track in the context. Can specify a specific track in the upcoming queue.",parameters:["options?: { uri?: string, uid?: string } // Optional specific track to skip to."],returns:"Promise<void>",example:`// Simple skip
await Spicetify.Platform.PlayerAPI.skipToNext();`},{name:"skipToPrevious()",description:"Skips to the previous track. If the current track has played for a few seconds, it will seek to the beginning instead.",parameters:["None"],returns:"Promise<void>",example:"await Spicetify.Platform.PlayerAPI.skipToPrevious();"},{name:"seekTo(milliseconds)",description:"Seeks to an absolute position in the current track.",parameters:["milliseconds: number // Time in milliseconds from the beginning of the track."],returns:"Promise<void>",example:"await Spicetify.Platform.PlayerAPI.seekTo(60000); // Seek to the 1-minute mark"},{name:"seekBy(milliseconds)",description:"Seeks by a relative amount from the current position.",parameters:["milliseconds: number // Can be positive (forward) or negative (backward)."],returns:"Promise<void>",example:"await Spicetify.Platform.PlayerAPI.seekBy(-15000); // Rewind 15 seconds"},{name:"setShuffle(shuffle)",description:"Sets the shuffle state for the current context.",parameters:["shuffle: boolean // true to enable shuffle, false to disable."],returns:"Promise<void>",example:"await Spicetify.Platform.PlayerAPI.setShuffle(true);"},{name:"setRepeat(state)",description:"Sets the repeat mode.",parameters:["state: RepeatState // 0 for none, 1 for context, 2 for track."],returns:"Promise<void>",example:`// Repeat the current playlist
await Spicetify.Platform.PlayerAPI.setRepeat(1);`},{name:"getQueue()",description:"Fetches the current playback queue.",parameters:["None"],returns:"Promise<Queue>",example:`const queue = await Spicetify.Platform.PlayerAPI.getQueue();
console.log('Next up:', queue.nextTracks[0]?.name);`},{name:"addToQueue(tracks)",description:"Adds one or more tracks to the end of the queue.",parameters:["tracks: Track[] // An array of track objects to add."],returns:"Promise<void>",example:`const track = { uri: 'spotify:track:...' };
await Spicetify.Platform.PlayerAPI.addToQueue([track]);`},{name:"removeFromQueue(tracks)",description:"Removes specific tracks from the queue.",parameters:["tracks: Track[] // Array of tracks to remove. Must have URI and UID properties from the queue."],returns:"Promise<void>",example:`const queue = await Spicetify.Platform.PlayerAPI.getQueue();
if (queue.nextTracks.length > 0) {
  await Spicetify.Platform.PlayerAPI.removeFromQueue([queue.nextTracks[0]]);
}`},{name:"playAsNextInQueue(tracks)",description:"Inserts tracks at the beginning of the queue to be played next.",parameters:["tracks: Track[] // An array of track objects to play next."],returns:"Promise<void>",example:"await Spicetify.Platform.PlayerAPI.playAsNextInQueue([{ uri: 'spotify:track:...' }]);"}],examples:[`// A simple function to toggle shuffle
async function toggleShuffle() {
    const currentState = Spicetify.Platform.PlayerAPI.getState();
    const isShuffle = currentState.shuffle;

    await Spicetify.Platform.PlayerAPI.setShuffle(!isShuffle);
    Spicetify.showNotification(\`Shuffle turned \${!isShuffle ? 'On' : 'Off'}\`);
}

toggleShuffle();`,`// Clear the upcoming queue
async function clearNextUp() {
    const queue = await Spicetify.Platform.PlayerAPI.getQueue();
    if (queue.nextTracks.length > 0) {
        await Spicetify.Platform.PlayerAPI.removeFromQueue(queue.nextTracks);
        Spicetify.showNotification("Queue cleared!");
    }
}

clearNextUp();`]};var U={id:"playlist",title:"PlaylistAPI",description:"Manages the contents of a specific playlist, such as its tracks. Use `LibraryAPI` to browse all playlists in a user's library.",icon:"\u{1F3B6}",color:"#50E3C2",coreMethods:[{name:"getContents(playlistUri)",description:"Gets the tracks and metadata of a specific playlist.",parameters:["playlistUri: string - The URI of the playlist to fetch."],returns:"Promise<PlaylistContents>",example:"const contents = await Spicetify.Platform.PlaylistAPI.getContents(playlistUri);"},{name:"add(playlistUri, trackUris, options)",description:"Adds one or more tracks to a playlist.",parameters:["playlistUri: string - The target playlist URI.","trackUris: string[] - An array of track URIs to add.","options: object - Optional: { before: string, after: string } to specify position."],returns:"Promise<void>",example:"await Spicetify.Platform.PlaylistAPI.add(playlistUri, ['spotify:track:4cOdK2wGLETOMsV3oYP2xl']);"},{name:"remove(playlistUri, tracks)",description:"Removes one or more tracks from a playlist.",parameters:["playlistUri: string - The target playlist URI.","tracks: object[] - An array of track objects, each with a `uri` property (e.g., [{ uri: 'spotify:track:...' }])."],returns:"Promise<void>",example:"await Spicetify.Platform.PlaylistAPI.remove(playlistUri, [{ uri: 'spotify:track:4cOdK2wGLETOMsV3oYP2xl' }]);"},{name:"move(playlistUri, tracks, options)",description:"Moves one or more tracks within a playlist.",parameters:["playlistUri: string - The target playlist URI.","tracks: object[] - An array of track objects to move, each with a `uri` property.","options: object - { before?: string, after?: string } to specify the new position. Use `before: 'end'` to move to the end."],returns:"Promise<void>",example:"await Spicetify.Platform.PlaylistAPI.move(playlistUri, [{ uri: 'spotify:track:4cOdK2wGLETOMsV3oYP2xl' }], { before: 'end' });"},{name:"getEvents()",description:"Returns an event emitter for playlist events. You can listen for `update` (when playlist contents change) and `operation_complete`.",returns:"EventEmitter",example:`Spicetify.Platform.PlaylistAPI.getEvents().addListener("update", (event) => {
  console.log("Playlist updated:", event.data.uri);
});`}],examples:[`// Get a playlist's tracks and log their names
const logPlaylistTracks = async (playlistUri) => {
    const playlist = await Spicetify.Platform.PlaylistAPI.getContents(playlistUri);
    console.log('Playlist Name:', playlist.metadata.name);
    console.log('Tracks:', playlist.items.map(item => item.name));
}

logPlaylistTracks("spotify:playlist:37i9dQZF1DXcBWIGoYBM5M");`]};var N={id:"rootlist",title:"RootlistAPI",description:"Provides full access to read and modify the raw, hierarchical structure of the user's library. This includes all playlists and folders in their exact, custom-sorted order. This API reflects the 'file system' of the library and allows for powerful modifications like creating folders, moving items, and renaming.",icon:"\u{1F5C2}\uFE0F",color:"#A0522D",coreMethods:[{name:"getContents(options?)",description:"Fetches the complete or partial, nested tree of the user's library. Can be filtered, sorted, and paginated.",parameters:["{","  folderUri?: string;   // URI of a specific folder to fetch contents from. If omitted, fetches the root.","  sort?: SortOptions;   // Sorting options for the returned items.","  filter?: string;      // A text string to filter items by name.","  offset?: number;      // The starting index for pagination.","  limit?: number;       // The number of items to return for pagination.","  flatten?: boolean;    // If true, returns a flat list instead of a nested tree.","}"],returns:"Promise<RootlistContents>",example:`// Get the top-level items in the library
const rootlist = await Spicetify.Platform.RootlistAPI.getContents();

// Get contents of a specific folder
const folderContents = await Spicetify.Platform.RootlistAPI.getContents({ folderUri: "spotify:folder:123" });`},{name:"createFolder(name, location?)",description:"Creates a new, empty folder at a specified location in the library.",parameters:["name: string            // The name of the new folder.","location?: LocationObject // Where to place the new folder (e.g., inside another folder, before/after an item). Defaults to the end of the root."],returns:"Promise<{ uri: string, ... }>",example:`// Create a folder named "My Vibe" at the top level
const { uri } = await Spicetify.Platform.RootlistAPI.createFolder("My Vibe");
console.log("Created folder with URI:", uri);`},{name:"renameFolder(folder, newName)",description:"Renames an existing folder.",parameters:["folder: RootlistItem // The folder item object (obtained from getContents) to rename.","newName: string      // The new name for the folder."],returns:"Promise<void>",example:`const folderToRename = rootlist.items.find(i => i.type === "folder" && i.name === "Old Vibe");
if (folderToRename) {
  await Spicetify.Platform.RootlistAPI.renameFolder(folderToRename, "Current Vibe");
}`},{name:"removeFolder(folderUri, options?)",description:"Removes a folder. By default, its contents are moved out; they are not deleted.",parameters:["folderUri: string         // The URI of the folder to remove.","{ contents?: boolean }  // If `contents` is true, also removes all playlists and subfolders within it."],returns:"Promise<void>",example:`// Remove the folder but keep its playlists
await Spicetify.Platform.RootlistAPI.removeFolder("spotify:folder:123");

// DANGEROUS: Remove the folder AND all its contents
await Spicetify.Platform.RootlistAPI.removeFolder("spotify:folder:456", { contents: true });`},{name:"createPlaylist(name, location?)",description:"Creates a new, empty playlist at a specified location.",parameters:["name: string            // The name for the new playlist.","location?: LocationObject // Where to place the new playlist. Defaults to the end of the root."],returns:"Promise<string | null> // The URI of the newly created playlist, or null on failure.",example:`// Create a playlist inside a specific folder
const folderUri = "spotify:folder:123";
const newPlaylistUri = await Spicetify.Platform.RootlistAPI.createPlaylist("Chill Beats", { inside: folderUri });`},{name:"add(uris, location?)",description:"Adds existing playlists or folders to a new location in the rootlist. This is effectively a 'move' operation for items that might not currently be in the main library view (e.g., a playlist you follow but haven't added).",parameters:["uris: string[]          // An array of playlist or folder URIs to add.","location?: LocationObject // Where to add the items."],returns:"Promise<void>",example:`const likedSongsUri = "spotify:user:spotify:playlist:37i9dQZEVXbLRQDuF5jeBp";
await Spicetify.Platform.RootlistAPI.add([likedSongsUri], { before: rootlist.items[0].uri });`},{name:"move(itemToMove, location)",description:"Moves one or more items (playlists/folders) to a new location.",parameters:["itemToMove: RootlistItem | RootlistItem[] // The item(s) to move.","location: LocationObject                // The target location."],returns:"Promise<void>",example:`const playlist = rootlist.items.find(i => i.name === "Workout");
const folder = rootlist.items.find(i => i.type === "folder" && i.name === "Favorites");
if (playlist && folder) {
  await Spicetify.Platform.RootlistAPI.move(playlist, { inside: folder.uri });
}`},{name:"remove(items)",description:"Removes items (playlists/folders) from the rootlist. This does NOT delete the playlist, it only removes it from the sidebar view.",parameters:["items: RootlistItem[] // An array of item objects to remove."],returns:"Promise<void>",example:`const itemsToRemove = rootlist.items.filter(i => i.name.includes("Old"));
await Spicetify.Platform.RootlistAPI.remove(itemsToRemove);`},{name:"setPublishedState(playlistUri, isPublished)",description:"Sets a playlist's published state (i.e., whether it appears on your public profile).",parameters:["playlistUri: string   // The URI of the playlist.","isPublished: boolean  // `true` to publish, `false` to unpublish."],returns:"Promise<void>",example:`const mySecretPlaylist = "spotify:playlist:abc";
await Spicetify.Platform.RootlistAPI.setPublishedState(mySecretPlaylist, false);`},{name:"getMetadata()",description:"Fetches metadata about the user's library.",parameters:["None"],returns:"Promise<{ ownedPlaylistCount: number, playlistCount: number }>"},{name:"getEvents()",description:"Returns an event emitter instance to listen for changes to the rootlist.",parameters:["None"],returns:"EventEmitter",example:`const rootlistEvents = Spicetify.Platform.RootlistAPI.getEvents();
rootlistEvents.on('update', () => {
  console.log('The library structure has changed!');
  // You might want to re-fetch the contents here
});`}],types:[{name:"RootlistContents",description:"The top-level object returned by `getContents()`.",definition:["{","  items: RootlistItem[];  // The array of folders and playlists.","  totalItemCount?: number; // The total number of items, useful for pagination.","}"]},{name:"RootlistItem",description:"Represents a single item in the rootlist, which can be a folder or a playlist.",definition:["{","  type: 'folder' | 'playlist';","  uri: string;","  name: string;","  items?: RootlistItem[]; // If type is 'folder', contains its children.","  // ... and other metadata properties.","}"]},{name:"LocationObject",description:"Specifies a target location for mutation operations like create, add, or move. Use only one property at a time.",definition:["{","  before?: string; // Place the item before the item with this URI.","  after?: string;  // Place the item after the item with this URI.","  inside?: string; // Place the item inside the folder with this URI.","}"]}],examples:[`// Recursively find all playlists within a specific folder name
const rootlist = await Spicetify.Platform.RootlistAPI.getContents();

function findPlaylistsInFolder(folderName, items) {
    for (const item of items) {
        if (item.type === 'folder' && item.name === folderName) {
            // Found the folder, return its playlists
            return item.items.filter(i => i.type === 'playlist');
        }
        if (item.type === 'folder' && item.items.length > 0) {
            // Recursively search in subfolders
            const found = findPlaylistsInFolder(folderName, item.items);
            if (found) return found;
        }
    }
    return null; // Folder not found
};

const oldSongsPlaylists = findPlaylistsInFolder("Old Songs", rootlist.items);
console.log(oldSongsPlaylists);`,`// Move all playlists starting with "Jazz" into a "Jazz Masters" folder
async function organizeJazzPlaylists() {
    const rootlist = await Spicetify.Platform.RootlistAPI.getContents();

    let jazzFolder = rootlist.items.find(i => i.type === 'folder' && i.name === "Jazz Masters");

    // If folder doesn't exist, create it
    if (!jazzFolder) {
        console.log("Creating 'Jazz Masters' folder...");
        const { uri } = await Spicetify.Platform.RootlistAPI.createFolder("Jazz Masters");
        jazzFolder = { uri, type: 'folder', name: 'Jazz Masters' };
    }

    const jazzPlaylists = rootlist.items.filter(
        i => i.type === 'playlist' && i.name.startsWith("Jazz")
    );

    if (jazzPlaylists.length > 0) {
        console.log(\`Moving \${jazzPlaylists.length} playlists...\`);
        await Spicetify.Platform.RootlistAPI.move(jazzPlaylists, { inside: jazzFolder.uri });
        console.log("Done!");
    } else {
        console.log("No Jazz playlists to move found at the root level.");
    }
}

organizeJazzPlaylists();`]};var{useState:J}=h,P=({code:e=""})=>{let[i,o]=J("Copy");return l("div",{className:"doc-code-block-wrapper",children:[r("button",{className:"doc-code-block__copy-button",onClick:()=>{navigator.clipboard.writeText(e.trim()),o("Copied!"),setTimeout(()=>o("Copy"),2e3)},children:i}),r("div",{className:"doc-code-block",children:r("div",{children:e.trim()})})]})};var I=({method:e,color:i})=>l("div",{className:"doc-method-card",children:[r("div",{className:"doc-method-card__name",style:{color:i},children:e.name}),r("div",{className:"doc-method-card__description",children:e.description}),e.parameters&&l("div",{className:"doc-method-card__section",children:[r("div",{children:"Parameters:"}),r("div",{children:e.parameters.map(o=>r("div",{children:o},o))})]}),e.returns&&l("div",{className:"doc-method-card__section",children:[r("div",{children:"Returns:"}),r("div",{className:"doc-method-card__returns",style:{color:i},children:e.returns})]}),l("div",{className:"doc-method-card__section",children:[r("div",{children:"Example:"}),r(P,{code:e.example})]})]});var z=({section:e,contentRef:i})=>e?l("div",{className:"doc-content",ref:i,children:[l("div",{className:"doc-content__header",children:[r("div",{className:"doc-content__header-icon",children:e.icon}),l("div",{children:[r("div",{className:"doc-content__header-title",style:{color:e.color},children:e.title}),r("div",{className:"doc-content__header-description",children:e.description})]})]}),l("div",{className:"doc-content__section",children:[r("div",{className:"doc-content__section-title",children:"Core Methods"}),e.coreMethods?.map(o=>r(I,{color:e.color,method:o},o.name))]}),e.utilityMethods&&e.utilityMethods.length>0&&l("div",{className:"doc-content__section",children:[r("div",{className:"doc-content__section-title",children:"Utility Methods"}),r("div",{children:e.utilityMethods.map(o=>r(I,{color:e.color,method:o},o.name))})]}),e.examples&&e.examples.length>0&&l("div",{className:"doc-content__section",children:[r("div",{className:"doc-content__section-title",children:"Usage Examples"}),e.examples.map(o=>r("div",{className:"doc-example-card",children:r(P,{code:o})},o))]})]}):l("div",{className:"doc-content doc-content--empty",ref:i,children:[r("div",{children:"No API Found"}),r("div",{children:"Please select an API from the sidebar or refine your search."})]});var{useCallback:W}=h,E=e=>{if(!e||typeof e!="string")return null;let i=e.replace("#","").trim();if(![3,6].includes(i.length))return null;let o=i.length===3?i.split("").map(s=>s+s).join(""):i,t=parseInt(o.slice(0,2),16),a=parseInt(o.slice(2,4),16),n=parseInt(o.slice(4,6),16);return Number.isNaN(t)||Number.isNaN(a)||Number.isNaN(n)?null:`${t}, ${a}, ${n}`},F=({sections:e,activeId:i,searchTerm:o,onSelect:t,onSearchChange:a})=>{let n=W((s,d)=>{(s.key==="Enter"||s.key===" ")&&(s.preventDefault(),t(d))},[t]);return l("div",{className:"doc-sidebar",children:[l("div",{className:"doc-sidebar__header",children:[r("div",{className:"doc-sidebar__title",children:"Spicetify Platform"}),r("div",{className:"doc-search-container",role:"search",children:r("input",{className:"doc-search-input",onChange:s=>a(s.target.value),placeholder:"Search APIs...",type:"text",value:o})})]}),r("div",{className:"doc-sidebar__nav",children:r("div",{children:e.map(s=>{let d="#1DB954",p=E(s.color)??E(d),f={"--accent":s.color??d,"--accent-rgb":`rgba(${p}, 0.12)`},g=i===s.id;return r("div",{style:f,children:l("button",{className:`doc-sidebar__nav-item ${g?"doc-sidebar__nav-item--active":""}`,onClick:()=>t(s.id),onKeyDown:Q=>n(Q,s.id),title:s.title,type:"button",children:[r("div",{className:"doc-sidebar__nav-icon",children:s.icon}),l("div",{className:"doc-sidebar__nav-body",children:[r("div",{className:"doc-sidebar__nav-text",children:s.title}),s.description&&r("div",{className:"doc-sidebar__nav-subtitle",children:s.description})]})]})},s.id)})})})]})};var{useEffect:X,useMemo:D,useRef:ee,useState:O}=h,S=[M,U,R,L,N,_,T,C],j=()=>{let[e,i]=O(S[0].id),[o,t]=O(""),a=ee(null),n=D(()=>S.filter(d=>d.title.toLowerCase().includes(o.toLowerCase())||d.description.toLowerCase().includes(o.toLowerCase())),[o]),s=D(()=>S.find(d=>d.id===e),[e]);return X(()=>{a.current?.scrollTo(0,0)},[]),l("div",{className:"doc-container",children:[r(F,{activeId:e,onSearchChange:t,onSelect:i,searchTerm:o,sections:n}),r(z,{contentRef:a,section:s})]})};var H=new CSSStyleSheet;H.replaceSync(":root{--doc-background-color: var(--spice-main, #071116);--doc-sidebar-color: var(--spice-sidebar, #0f1113);--doc-card-color: var(--spice-card, #0b0d0e);--doc-elevated-card-color: var(--spice-main-elevated, #0e1517);--doc-border-color: var(--spice-button-disabled, rgba(255, 255, 255, .03));--doc-text-primary: var(--spice-text, #e6eef8);--doc-text-secondary: var(--spice-subtext, #9aa6b2);--doc-text-bright-accent: var(--spice-button-active, #1db954);--doc-selected-row: var(--spice-selected-row, rgba(29, 185, 84, .12));--doc-code-background: #1e1e1e;--sidebar-width: 280px;--sidebar-bg-top: #070808;--sidebar-bg-bottom: #0d1112;--sidebar-elev: rgba(255, 255, 255, .02);--text-primary-light: var(--doc-text-primary);--text-secondary-light: var(--doc-text-secondary);--muted: rgba(255, 255, 255, .04);--search-bg: rgba(255, 255, 255, .02);--doc-accent: var(--doc-text-bright-accent, #1db954);--doc-accent-rgb: 29, 185, 84}.doc-container{display:flex;height:100%;overflow:hidden;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;color:var(--doc-text-primary);background-color:var(--doc-background-color);border-radius:var(--border-radius, 8px)}.doc-sidebar{display:flex;flex-direction:column;gap:12px;width:var(--sidebar-width);padding:20px;color:var(--text-primary-light);background-color:var(--doc-background-color);border-right:1px solid var(--doc-border-color);box-shadow:inset 1px 0 #ffffff05}.doc-sidebar__header{display:flex;flex-direction:column;gap:12px;padding-bottom:6px}.doc-sidebar__title{margin:0;font-size:16px;font-weight:800;color:var(--text-primary-light);letter-spacing:-.02em}.doc-search-container{display:block}.doc-search-input{width:100%;padding:10px 12px;font-size:13px;color:var(--text-primary-light);outline:none;background:var(--search-bg);border:1px solid rgba(255,255,255,.03);border-radius:10px;transition:box-shadow .18s ease,transform .12s ease,border-color .12s ease}.doc-search-input::placeholder{color:#e6eef873}.doc-search-input:focus{border-color:#ffffff0f;box-shadow:0 6px 20px #02061799;transform:translateY(-1px)}.doc-sidebar__nav{flex-grow:1;padding-right:6px;margin-top:4px;overflow-y:auto}.doc-sidebar__nav div{padding:0;margin:0;list-style:none}.doc-sidebar__nav-item{display:flex;width:100%;gap:12px;align-items:center;padding:10px;margin:6px 0;border-radius:10px;background:transparent;color:var(--text-primary-light);text-align:left;border:none;cursor:pointer;transition:transform .12s ease,background .12s ease,box-shadow .12s ease;position:relative;-webkit-tap-highlight-color:transparent}.doc-sidebar__nav-item:focus{outline:none;border-radius:10px;box-shadow:0 8px 26px #02061780;transform:translateY(-1px)}.doc-sidebar__nav-item:hover{background:#ffffff05;transform:translate(4px)}.doc-sidebar__nav-icon{display:inline-grid;place-items:center;min-width:36px;min-height:36px;font-size:18px;line-height:1;background:#ffffff08;border-radius:8px;transition:transform .12s ease,background .12s ease,box-shadow .12s ease}.doc-sidebar__nav-body{display:flex;flex-direction:column;gap:2px;overflow:hidden}.doc-sidebar__nav-text{display:block;overflow:hidden;text-overflow:ellipsis;font-size:14px;font-weight:600;color:var(--text-primary-light);white-space:nowrap}.doc-sidebar__nav-subtitle{display:block;margin-top:1px;overflow:hidden;text-overflow:ellipsis;font-size:12px;color:var(--text-secondary-light);white-space:nowrap;opacity:.95}.doc-sidebar__nav-item--active{color:var(--spice-text);background:rgba(var(--accent-rgb, var(--doc-accent-rgb)),.12);border-left:4px solid var(--accent, var(--doc-accent));box-shadow:0 10px 30px #02061799;transform:translate(0)}.doc-sidebar__nav-item--active .doc-sidebar__nav-icon{color:var(--spice-text);background:linear-gradient(135deg,var(--accent, var(--doc-accent)) 0%,rgba(255,255,255,.06) 100%);box-shadow:0 8px 20px #00000073;transform:scale(1.03)}.doc-sidebar__nav-item--active .doc-sidebar__nav-text,.doc-sidebar__nav-item--active .doc-sidebar__nav-subtitle{color:var(--spice-text);text-shadow:0 1px 0 rgba(0,0,0,.45)}.doc-sidebar__footer{padding-top:8px;border-top:1px solid rgba(255,255,255,.02)}.doc-sidebar__footer-note{font-size:12px;color:var(--text-secondary-light)}.doc-sidebar__nav::-webkit-scrollbar{width:8px}.doc-sidebar__nav::-webkit-scrollbar-thumb{background:#ffffff08;border-radius:10px}@media (max-width: 720px){.doc-sidebar{flex:0 0 220px;padding:14px}.doc-sidebar__nav-icon{min-width:32px;min-height:32px}.doc-sidebar__nav-text{font-size:13px}}.doc-content{flex-grow:1;padding:24px 32px;overflow-y:auto;color:var(--doc-text-primary);background:transparent}.doc-content__header{display:flex;gap:20px;align-items:center;padding-bottom:24px;margin-bottom:32px;border-bottom:1px solid var(--doc-border-color)}.doc-content__header-icon{font-size:40px}.doc-content__header-title{margin:0;font-size:32px;font-weight:900;color:var(--doc-text-primary)}.doc-content__header-description{max-width:90%;margin:4px 0 0;font-size:16px;color:var(--doc-text-secondary)}.doc-content__section{margin-bottom:40px}.doc-content__section-title{padding-bottom:8px;margin:0 0 24px;font-size:22px;font-weight:700;color:var(--doc-text-primary);border-bottom:1px solid var(--doc-border-color)}.doc-method-card,.doc-example-card{padding:20px;margin-bottom:16px;background-color:var(--doc-card-color);border:1px solid var(--doc-border-color);border-radius:12px;box-shadow:0 4px 12px #0000001f}.doc-method-card__name{margin:0 0 10px;font-family:Menlo,Consolas,Monaco,monospace;font-size:18px;font-weight:600;color:var(--doc-text-primary)}.doc-method-card__description{margin:0 0 16px;font-size:15px;line-height:1.5;color:var(--doc-text-secondary)}.doc-method-card__section{margin-top:16px;font-size:14px;color:var(--doc-text-secondary)}.doc-method-card__section strong{display:block;margin-bottom:8px;font-weight:600;color:var(--doc-text-primary)}.doc-method-card__section div{padding-left:20px;margin:0;line-height:1.6;color:var(--doc-text-secondary)}.doc-method-card__returns{display:inline-block;padding:4px 8px;font-family:Menlo,Consolas,Monaco,monospace;font-weight:600;color:var(--doc-text-primary);background-color:var(--doc-elevated-card-color);border-radius:4px}.doc-code-block-wrapper{position:relative;margin-top:12px}.doc-code-block__copy-button{position:absolute;top:12px;right:12px;padding:6px 10px;font-size:12px;font-weight:600;color:var(--doc-text-secondary);cursor:pointer;background-color:var(--doc-card-color);border:1px solid var(--doc-border-color);border-radius:6px;opacity:0;transition:opacity .18s ease,background-color .18s ease}.doc-code-block-wrapper:hover .doc-code-block__copy-button{opacity:1}.doc-code-block__copy-button:hover{color:var(--doc-text-primary);background-color:var(--doc-elevated-card-color)}.doc-code-block{padding:16px;margin:0;overflow-x:auto;background-color:var(--doc-code-background);border:1px solid var(--doc-border-color);border-radius:8px}.doc-code-block code{font-family:Menlo,Consolas,Monaco,monospace;font-size:14px;line-height:1.5;color:#d4d4d4;white-space:pre}.doc-sidebar__nav::-webkit-scrollbar,.doc-content::-webkit-scrollbar{width:12px}.doc-sidebar__nav::-webkit-scrollbar-track,.doc-content::-webkit-scrollbar-track{background:transparent}.doc-sidebar__nav::-webkit-scrollbar-thumb,.doc-content::-webkit-scrollbar-thumb{background-color:var(--doc-border-color);background-clip:padding-box;border:3px solid transparent;border-radius:10px}.doc-sidebar__nav::-webkit-scrollbar-thumb:hover,.doc-content::-webkit-scrollbar-thumb:hover{background-color:var(--doc-text-secondary)}@media (max-width: 900px){.doc-content{padding:16px 20px}}");var V=H;document.adoptedStyleSheets.push(V);A({path:"api-documentation",element:r(j,{})});Spicetify.Mousetrap.bind("f8",async()=>{debugger;v({message:"Devtools must be open do use debugger",isWarning:!0})});await Spicetify.Platform.ProductStateAPI.productStateApi.putValues({pairs:{"app-developer":"2"}},{});var B=0,q=!1;Spicetify.Platform.ProductStateAPI.productStateApi.subValues({keys:["app-developer"]},async e=>{q||(B<5?e?.pairs?.["app-developer"]!=="2"&&(console.log('"app-developer" value changed. Resetting to "2".'),await Spicetify.Platform.ProductStateAPI.productStateApi.putValues({pairs:{"app-developer":"2"}},{}),B++):(console.error("Rate limit exceeded for product state changes. Permanently disabling."),q=!0))});var te=new Spicetify.ContextMenuV2.Item({children:"Copy Playlist props to clipboard",leadingIcon:c.HTML.duplicate,onClick:(e,i,o)=>{let t=u(e.props),a={uri:t?.uri,name:t?.name,owner:t?.owner?{name:t.owner.name,uri:t.owner.uri}:void 0,isOwnedBySelf:t?.isOwnedBySelf};Spicetify.Platform.ClipboardAPI.copy(a)},shouldAdd:e=>{let i=u(e),o=Spicetify.URI.from(i.uri)?.type;return o===Spicetify.URI.Type.PLAYLIST||o===Spicetify.URI.Type.PLAYLIST_V2}}),oe=new Spicetify.ContextMenuV2.Item({children:"Copy Track props to clipboard",leadingIcon:c.HTML.duplicate,onClick:(e,i,o)=>{let t=u(e.props),a={name:t?.name,uri:t?.uri,uid:t?.uid,albumName:t.album?.name,albumUri:t.albumUri||t.album?.uri,artists:t.artists?.map(n=>({name:n.name,uri:n.uri})),contextName:t?.contextName,contextUri:t.contextUri||t.context?.uri};Spicetify.Platform.ClipboardAPI.copy(a)},shouldAdd:e=>{let i=u(e);return Spicetify.URI.from(i.uri)?.type===Spicetify.URI.Type.TRACK}}),re=new Spicetify.ContextMenuV2.Item({children:"Copy Artist props to clipboard",leadingIcon:c.HTML.duplicate,onClick:(e,i,o)=>{let a={uri:u(e.props)?.uri};Spicetify.Platform.ClipboardAPI.copy(a)},shouldAdd:e=>{let i=u(e);return Spicetify.URI.from(i.uri)?.type===Spicetify.URI.Type.ARTIST}}),ie=new Spicetify.ContextMenuV2.Item({children:"Copy Album props to clipboard",leadingIcon:c.HTML.duplicate,onClick:(e,i,o)=>{let t=u(e.props),a={uri:t?.uri,artistUri:t?.artistUri};Spicetify.Platform.ClipboardAPI.copy(a)},shouldAdd:e=>{let i=u(e);return Spicetify.URI.from(i.uri)?.type===Spicetify.URI.Type.ALBUM}}),ae=new Spicetify.ContextMenuV2.Item({children:"Copy All props to clipboard",leadingIcon:c.HTML.duplicate,divider:"after",onClick:(e,i,o)=>{Spicetify.Platform.ClipboardAPI.copy(e.props)},shouldAdd:()=>!0}),ne=new Spicetify.ContextMenuV2.Item({children:"Log context menu props",leadingIcon:c.HTML.terminal,onClick:(e,i,o)=>{console.log("Context:",e),console.log("Item:",i),console.log("Event:",o)},shouldAdd:()=>!0}),se=new Spicetify.ContextMenuV2.Item({children:"Log Events Listeners",leadingIcon:c.HTML.terminal,onClick:()=>{v({message:"Only goes away after a reload/restart",isWarning:!0}),Spicetify.Platform.PlayerAPI._events._emitter.addListeners({update:e=>{console.log("PlayerAPI Update event:",e)},action:e=>{console.log("PlayerAPI action event:",e)},error:e=>{console.log("PlayerAPI error event:",e)},ready:e=>{console.log("PlayerAPI ready event:",e)},queue_action_complete:e=>{console.log("PlayerAPI queue_action_complete event:",e)},queue_update:e=>{console.log("PlayerAPI queue_update event:",e)}}),Spicetify.Platform.PlaylistAPI._events._emitter.addListeners({update:e=>{console.log("PlaylistAPI update event:",e)},operation_complete:e=>{console.log("PlaylistAPI operation_complete event:",e)}}),Spicetify.Platform.RootlistAPI._events._emitter.addListeners({operation:e=>{console.log("RootlistAPI operation event:",e)},operation_complete:e=>{console.log("RootlistAPI operation_complete event:",e)},update:e=>{console.log("RootlistAPI update event:",e)},update_item:e=>{console.log("RootlistAPI update_item event:",e)}}),Spicetify.Platform.PlaybackAPI._events._emitter.addListeners({muted_changed:e=>{console.log("PlaybackAPI muted_changed event:",e)},volume:e=>{console.log("PlaybackAPI volume event:",e)}}),Spicetify.Platform.LocalStorageAPI._events._emitter.addListeners({update:e=>{console.log("LocalStorageAPI update event:",e)}})},shouldAdd:()=>!0});function le(){let e=Spicetify.Platform.UBILogger.ubiLogger.eventSender;if(e.send.name==="patchedSend"){Spicetify.showNotification("UBI Event Logger is already active.");return}let i=e.send;function o(...t){let n=t[0]?.name||"Unknown Event";return console.groupCollapsed(`Intercepted Spotify UBI Event: ${n}`),console.log("Arguments:",t),console.log("Timestamp:",new Date().toISOString()),console.trace("Call stack"),console.groupEnd(),i.apply(this,t)}e.send=o,Spicetify.showNotification("UBI Event Logger patch applied.")}var ce=new Spicetify.ContextMenuV2.Item({children:"Log User Behavior Insights Events",leadingIcon:c.HTML.terminal,onClick:()=>{v({message:"Only goes away after a reload/restart",isWarning:!0}),le()},shouldAdd:()=>!0}),de=new Spicetify.ContextMenuV2.Item({children:"Platform APIs Documentation",leadingIcon:c.HTML.terminal,divider:"both",onClick:()=>{Spicetify.Platform.History.push("/api-documentation",void 0)},shouldAdd:()=>!0}),pe=new Spicetify.ContextMenuV2.Item({children:"Reload Spotify",leadingIcon:c.HTML.reload,onClick:()=>{location.reload()},shouldAdd:()=>!0}),me=new Spicetify.ContextMenuV2.Item({children:"Restart Spotify",leadingIcon:c.HTML.reload,onClick:()=>{Spicetify.Platform.LifecycleAPI.restart()},shouldAdd:()=>!0}),fe=new Spicetify.ContextMenuV2.Item({children:"Close Spotify",leadingIcon:c.HTML.close,onClick:()=>{Spicetify.Platform.LifecycleAPI.shutdown()},shouldAdd:()=>!0}),ue=new Spicetify.ContextMenuV2.ItemSubMenu({text:"Developer Utils",leadingIcon:c.HTML.terminal,items:[ie,re,te,oe,ae,ne,se,ce,de,pe,me,fe],shouldAdd:()=>!0});ue.register();Spicetify.Mousetrap.bind(["e"],()=>{Spicetify.Platform.History.push("/api-documentation",void 0)});await new Promise(e=>setTimeout(e,5e3));
